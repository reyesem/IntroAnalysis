% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modeling_phrases.R
\name{specify_mean_model}
\alias{specify_mean_model}
\alias{specify_process}
\title{Specify the mean model for the data generating process.}
\usage{
specify_mean_model(formula, data, family, ...)
}
\arguments{
\item{formula}{an object of class "\code{\link[stats]{formula}}": a symbolic
description of the form of the mean response model. Allows some notation
not typical in base R.}

\item{data}{an optional data frame containing the variables appearing in
\code{formula}.}

\item{family}{a description of the error distribution and link function to
be used in the model. See \code{\link[stats]{glm}} for details. If missing
(default), a linear model is used.}

\item{...}{additional arguments to pass to \code{\link[stats]{lm}} or
\code{\link[stats]{glm}}.}
}
\value{
an objet of type \code{lm} or \code{glm} depending on whether
\code{family} is specified.
}
\description{
A wrapper for \code{\link[stats]{lm}} and \code{\link[stats]{glm}} which
allows the user to specify the form of the model for the mean response of
the data generating process.
}
\details{
\code{specify_mean_model} provides a single interface to both \code{lm} and
\code{glm} with two noticable differences:
\enumerate{
  \item The intercept is \emph{not} specified by default.
  \item The notation "constant" can be used in the formula statement in
  order to specify terms which do not require parameters, which are typically
  specified by \code{offset()} in base R. The difference is that "constant"
  allows scalar terms.}

If \code{family} is not specified, then \code{lm} is used to fit the model.
Otherwise, \code{glm} is used to fit the model.
}
\examples{
# specify a linear model
fit_reg <- specify_mean_model(mpg ~ 1 + hp, data = mtcars)
summary(fit_reg)

# intercept is not included by default
fit_0_intercept <- specify_mean_model(mpg ~ hp, data = mtcars)
summary(fit_0_intercept)

# use 'constant()' to prevent parameter from being fit
fit_restricted <- specify_mean_model(mpg ~ constant(3) + hp, data = mtcars)
summary(fit_restricted)

# specify a logistic regression model
fit_logistic <- specify_mean_model(am ~ 1 + hp,
  family = binomial,
  data = mtcars)
summary(fit_logistic)

}
