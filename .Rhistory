??use_rmarkdown_template
usethis::use_rmarkdown_template(template_name = "MA223 Assignment", template_description = "Template for individual/group assignments in MA223.")
# Function: reyes_setup
# Description: personal function for students in the course so that all
#              necessary functionality is incorporated.
reyes_setup <- function(){
## ---- Clean Slate ----
# Remove anything previously existing and start with clean slate
rm(list = ls(sorted=FALSE)[ls(sorted=FALSE) != "params"])
gc()
## ---- Load Packages ----
library(IntroAnalysis)
library(tidyverse)
library(knitr)
## ---- Change Options ----
# Suppress status bar in dplyr.
# Change handling of ordered factors
options(dplyr.show_progress = FALSE,
contrasts = rep("contr.treatment", 2))
# Change theme for plots
theme_set(theme_bw(14))
theme_update(legend.position = "bottom")
# Specify chunk options
knitr::opts_chunk$set(
prompt = FALSE,
comment = "",
message = FALSE,
warning = FALSE,
out.width = ifelse(is_latex_output(), "0.8\\textwidth", "80%"),
fig.align = "center",
linewidth = 80)
## ---- Ensure Source Code Wraps ----
.hook_source = knitr::knit_hooks$get("source")
knitr::knit_hooks$set(
source = function(x, options){
# this hook is used only when linewidth option is not NULL
if (!is.null(n <- options$linewidth)){
x = knitr:::split_lines(x)
x = ifelse(nchar(x) > n, stringr::str_wrap(x, width = n, exdent = 2), x)
}
.hook_source(x, options)
})
## ---- Create Special Blocks ----
eng_instructor <- function(options) {
if (identical(options$echo, FALSE)) return()
code = paste0(paste(options$code, collapse = '\n'), "\n"); type = options$type
if (is.null(type)) return(code)
if(!is.null(type) && type=="solution"){
code = paste("__SOLUTION__:  ", code, sep="\n")
}
if (is.null(opts_knit$get("rmarkdown.pandoc.to"))) stop('The engine "instructor" is for R Markdown only')
l1 = options$latex.options
if (is.null(l1)) l1 = ''
# protect environment options because Pandoc may escape the characters like
# {}; when encoded in integers, they won't be escaped, but will need to
# restore them later; see bookdown:::restore_block2
if (l1 != '') l1 = paste(
c('\\iffalse{', utf8ToInt(enc2utf8(l1)), '}\\fi{}'), collapse = '-'
)
h2 = ifelse(is.null(options$html.tag), 'div', options$html.tag)
h3 = ifelse(is.null(options$html.before), '', options$html.before)
h4 = ifelse(is.null(options$html.after), '', options$html.after)
h5 = ifelse(is.null(options$html.before2), '', options$html.before2)
h6 = ifelse(is.null(options$html.after2), '', options$html.after2)
sprintf(
'\\BeginKnitrBlock{%s}%s%s<%s class="%s" custom-style="%s">%s%s%s</%s>%s\\EndKnitrBlock{%s}',
type, l1, h3, h2, type, type, h5, code, h6, h2, h4, type
)
}
knit_engines$set(c(knit_engines$get(),
"instructor" = eng_instructor))
}
reyes_setup()
knit_engines$get()
?rmarkdown::word_document
usethis::use_rmarkdown_template(template_name = "MA223 Lab", template_description = "Template for lab assignments in MA223.")
library(IntroAnalysis)
m1 <- lm(dist ~ speed, data = cars)
m2 <- lm(dist ~ offset(4.0*speed), data = cars)
m3 <- lm(dist ~ offset(3.8*speed), data = cars)
var <- setdiff(names(coef(m1)), names(coef(m2)))
bhat <- coef(m1)[var]
cbind(bhat*model.frame(m1)[, var] - m2$offset, bhat*model.frame(m1)[, var] - m3$offset) / model.frame(m1)[, var]
x <- rf(10000, df1 = 1, df2 = 10)
xs <- sqrt(x)
plot(density(x))
plot(density(xs))
xs2 <- c(-xs, xs)
plot(density(xs2))
plot(density(xs * sample(c(-1, 1), size = length(x), replace = TRUE)))
x <- rf(10000, df1 = 1, df2 = 10)
xs <- c(-sqrt(x), sqrt(x))
f1 <- dt(xs, df = 10)
f2 <- abs(xs) * df(xs^2, df1 = 1, df2 = 10)
any(f1 != f2)
any(round(f1 - f2, 5) != 0)
plot(f1 ~ xs, type = 'l')
plot(f1 ~ xs)
lines(f2 ~ xs, col = 'blue')
plot(f1 ~ xs)
points(f2 ~ xs, col = 'blue')
m1$offset
1 + m1$offset
is.null(m1$offset)
sign(-1)
sign(c(-3.5, 1, 0))
# Determine sign of coefficient for a one-sided hypothesis test.
determine_sign <- function(fit1, fit0) {
.variable <- setdiff(names(coef(fit1)), names(coef(fit0)))
.estimate <- coef(fit1)[.variable]
.variable <- model.frame(fit1)[, .variable]
.off1 <- fit1$offset
.off0 <- fit0$offset
if (is.null(.off1)) .off1 <- 0
if (is.null(.off0)) .off0 <- 0
sign(((.estimate * .variable) + .off1 - .off2) / .variable)[1]
}
# Q: how to determine sign of (bhat - b0) from model fits.
m1 <- lm(dist ~ speed, data = cars)
m2 <- lm(dist ~ offset(4.0*speed), data = cars)
m3 <- lm(dist ~ offset(3.8*speed), data = cars)
determine_sign(m1, m2)
determine_sign(m1, m3)
determine_sign(m1, lm(dist ~ 1, data = cars))
determine_sign(lm(dist ~ 1, data = cars), lm(dist ~ -1 + offset(rep(0, length(dist))), data = cars))
# Determine sign of coefficient for a one-sided hypothesis test.
determine_sign <- function(fit1, fit0) {
.variable <- setdiff(names(coef(fit1)), names(coef(fit0)))
.estimate <- coef(fit1)[.variable]
.variable <- model.frame(fit1)[, .variable]
.off1 <- fit1$offset
.off0 <- fit0$offset
if (is.null(.off1)) .off1 <- 0
if (is.null(.off0)) .off0 <- 0
sign(((.estimate * .variable) + .off1 - .off0) / .variable)[1]
}
# Q: how to determine sign of (bhat - b0) from model fits.
m1 <- lm(dist ~ speed, data = cars)
m2 <- lm(dist ~ offset(4.0*speed), data = cars)
m3 <- lm(dist ~ offset(3.8*speed), data = cars)
determine_sign(m1, m2)
determine_sign(m1, m3)
determine_sign(m1, lm(dist ~ 1, data = cars))
determine_sign(lm(dist ~ 1, data = cars), lm(dist ~ -1 + offset(rep(0, length(dist))), data = cars))
m1 <- lm(dist ~ speed, data = cars)
m2 <- lm(dist ~ offset(4.0*speed), data = cars)
m3 <- lm(dist ~ offset(3.8*speed), data = cars)
ma <- lm(dist ~ 1, data = cars)
mb <- lm(dist ~ -1, offset = rep(0, length(dist)), data = cars)
ma
mb
coef(ma)
setdiff(names(coef(ma)), names(coef(mb)))
ma$offset
mb$offset
model.frame(ma)
model.frame(ma, 'Intercet')
model.frame(ma)[, 'Intercet']
try(model.frame(ma)[, 'Intercet'])
?try
a1 <- try(model.frame(ma)[, 'Intercet'], silent = T)
class(a1)
a1 <- try(model.frame(ma)[, 'dist'], silent = T)
class(a)
class(a)
class(a1)
# Determine sign of coefficient for a one-sided hypothesis test.
determine_sign <- function(fit1, fit0) {
.variable <- setdiff(names(coef(fit1)), names(coef(fit0)))
.estimate <- coef(fit1)[.variable]
.variable <- try(model.frame(fit1)[, .variable], silent = TRUE)
if (class(.variable) == 'try-error') {
.variable <- 1
}
.off1 <- fit1$offset
.off0 <- fit0$offset
if (is.null(.off1)) .off1 <- 0
if (is.null(.off0)) .off0 <- 0
sign(((.estimate * .variable) + .off1 - .off0) / .variable)[1]
}
# Q: how to determine sign of (bhat - b0) from model fits.
m1 <- lm(dist ~ speed, data = cars)
m2 <- lm(dist ~ offset(4.0*speed), data = cars)
m3 <- lm(dist ~ offset(3.8*speed), data = cars)
ma <- lm(dist ~ 1, data = cars)
mb <- lm(dist ~ -1, offset = rep(0, length(dist)), data = cars)
determine_sign(m1, m2)
determine_sign(m1, m3)
determine_sign(m1, ma)
determine_sign(ma, mb)
m1
summary(ma)
?swithc
?switch
?warning
?t.test
m1 <- specify_mean_model(dist ~ 1 + speed, data = cars)
m0 <- specify_mean_model(dist ~ 1 + constant(3.8*speed), data = cars)
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE)
anova(m0, m1)
ma <- specify_mean_model(dist ~ 1, data = cars)
mb <- specify_mean_model(dist ~ constant(40), data = cars)
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'ne')
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'lt')
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'gt')
t.test(data$dist, alternative = 'two.sided', mu = 40)
t.test(data$dist, alternative = 'less', mu = 40)
t.test(data$dist, alternative = 'greater', mu = 40)
m1 <- specify_mean_model(dist ~ 1 + speed, data = cars)
m0 <- specify_mean_model(dist ~ 1 + constant(3.8*speed), data = cars)
library(IntroAnalysis)
m1 <- specify_mean_model(dist ~ 1 + speed, data = cars)
m0 <- specify_mean_model(dist ~ 1 + constant(3.8*speed), data = cars)
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE)
anova(m0, m1)
ma <- specify_mean_model(dist ~ 1, data = cars)
mb <- specify_mean_model(dist ~ constant(40), data = cars)
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'ne')
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'lt')
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'gt')
t.test(data$dist, alternative = 'two.sided', mu = 40)
t.test(data$dist, alternative = 'less', mu = 40)
t.test(data$dist, alternative = 'greater', mu = 40)
t.test(cars$dist, alternative = 'two.sided', mu = 40)
t.test(cars$dist, alternative = 'less', mu = 40)
t.test(cars$dist, alternative = 'greater', mu = 40)
compare.models.lm
getAnywhere(compare.models.lm)
library(IntroAnalysis)
m1 <- specify_mean_model(dist ~ 1 + speed, data = cars)
m0 <- specify_mean_model(dist ~ 1 + constant(3.8*speed), data = cars)
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE)
anova(m0, m1)
compare_models.lm
getAnywhere(compare_models.lm)
debugonce(compare_models.lm)
debugonce(IntroAnalysis::compare_models.lm)
debugonce(IntroAnalysis:::compare_models.lm)
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE)
anova(m0, m1)
alternative
match.arg(alternative)
?switch
m1 <- specify_mean_model(dist ~ 1 + speed, data = cars)
m0 <- specify_mean_model(dist ~ 1 + constant(3.8*speed), data = cars)
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE)
anova(m0, m1)
library(IntroAnalysis)
ma <- specify_mean_model(dist ~ 1, data = cars)
mb <- specify_mean_model(dist ~ constant(40), data = cars)
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'ne')
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'lt')
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'gt')
t.test(cars$dist, alternative = 'two.sided', mu = 40)
t.test(cars$dist, alternative = 'less', mu = 40)
t.test(cars$dist, alternative = 'greater', mu = 40)
debugonce(IntroAnalysis:::compare_models.lm)
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'lt')
alternative
.anova
.anova$df[1]
m1 <- specify_mean_model(dist ~ 1 + speed, data = cars)
m0 <- specify_mean_model(dist ~ 1 + constant(3.8*speed), data = cars)
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE)
anova(m0, m1)
ma <- specify_mean_model(dist ~ 1, data = cars)
mb <- specify_mean_model(dist ~ constant(40), data = cars)
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'ne')
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'lt')
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'gt')
t.test(cars$dist, alternative = 'two.sided', mu = 40)
t.test(cars$dist, alternative = 'less', mu = 40)
t.test(cars$dist, alternative = 'greater', mu = 40)
library(IntroAnalysis)
debugonce(IntroAnalysis:::compare_models.lm)
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'lt')
.anova
m1 <- specify_mean_model(dist ~ 1 + speed, data = cars)
m0 <- specify_mean_model(dist ~ 1 + constant(3.8*speed), data = cars)
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE)
anova(m0, m1)
ma <- specify_mean_model(dist ~ 1, data = cars)
mb <- specify_mean_model(dist ~ constant(40), data = cars)
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'ne')
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'lt')
compare_models(ma, mb, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'gt')
t.test(cars$dist, alternative = 'two.sided', mu = 40)
t.test(cars$dist, alternative = 'less', mu = 40)
t.test(cars$dist, alternative = 'greater', mu = 40)
library(IntroAnalysis)
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'lt')
m1 <- specify_mean_model(dist ~ 1 + speed, data = cars)
m0 <- specify_mean_model(dist ~ 1 + constant(3.8*speed), data = cars)
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'lt')
1 - pt((coef(m1)[2] - 3.8) / sqrt(vcov(m1)[2,2]), df = 48)
coef(m1)[2]
m1 <- specify_mean_model(dist ~ 1 + speed, data = cars)
m0 <- specify_mean_model(dist ~ 1 + constant(3.8*speed), data = cars)
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'lt')
compare_models(m1, m0, assume.normality = TRUE, assume.constant.variance = TRUE,
alternative = 'gt')
pt((coef(m1)[2] - 3.8) / sqrt(vcov(m1)[2,2]), df = 48)
1 - pt((coef(m1)[2] - 3.8) / sqrt(vcov(m1)[2,2]), df = 48)
install.packages("roxygen2")
library(IntroAnalysis)
install.packages("C:/Users/reyesem/OneDrive - Rose-Hulman Institute of Technology/Github/tidylmboot_0.1.0.tar.gz", repos = NULL, type = "source")
m1 <- lm(dist ~ speed, data = cars)
m0 <- lm(dist ~ 1, data = cars)
b1 <- tidylmboot::lm_boot(m1, replications = 499)
str(b1)
e1 <- estimate_parameters(m1, confidence.level = 0.95, simulation.replications = 499)
str(e1)
apply(attr(e1, 'Sampling Distribution'), 2, sd)
?tidylmboot::lm_boot
?match.arg
?lmboot::bayesian.boot
?lmboot::paired.boot
lmboot::residual.boot()
lmboot::residual.boot
bootstrap_residual <- function(fit,
reps,
wild,
construct){
.resid <- fit$residuals
.n <- length(.resid)
# obtain (X'X)^(-1) X'
.w <- fit$weights
if (is.null(.w)) .w <- rep(1, .n)
.H <- qr.coef(fit$qr, sqrt(.w) * diag(.n))
if (wild){
# obtain new residuals through multiplication by random variable
.bootr <- matrix(rmammen(.n*reps, construct = construct),
nrow = .n, ncol = reps) * .resid
} else {
# obtain new residuals through resampling of original residuals
.bootr <- matrix(sample(.resid, size = .n*reps, replace = TRUE),
nrow = .n, ncol = reps)
}
# compute estimates
.ests <- fit$coefficients + (.H %*% .bootr)
# compute standard errors
.sse <-
matrix(colSums(.w * .bootr * .bootr) -
colSums((sqrt(.w) * .bootr) * (qr.Q(fit$qr) %*% t(qr.Q(fit$qr)) %*%
(sqrt(.w) * .bootr))),
nrow = nrow(.ests), ncol = ncol(.ests), byrow = TRUE)
.sse <- my_round(.sse)
.stderrs <- sqrt(diag(chol2inv(qr.R(fit$qr))) * (.sse/fit$df.residual))
attr(.ests, "std.err") <- .stderrs
attr(.ests, "original.estimates") <- fit$coefficients
attr(.ests, "original.std.err") <- sqrt(diag(vcov(fit)))
.ests
}
bootstrap_residual <- function(fit,
reps,
wild,
construct){
.resid <- fit$residuals
.n <- length(.resid)
# obtain (X'X)^(-1) X'
.w <- fit$weights
if (is.null(.w)) .w <- rep(1, .n)
.H <- qr.coef(fit$qr, sqrt(.w) * diag(.n))
if (wild){
# obtain new residuals through multiplication by random variable
.bootr <- matrix(rmammen(.n*reps, construct = construct),
nrow = .n, ncol = reps) * .resid
} else {
# obtain new residuals through resampling of original residuals
.bootr <- matrix(sample(.resid, size = .n*reps, replace = TRUE),
nrow = .n, ncol = reps)
}
# compute estimates
.ests <- fit$coefficients + (.H %*% .bootr)
# compute standard errors
# .sse <-
#   matrix(colSums(.w * .bootr * .bootr) -
#            colSums((sqrt(.w) * .bootr) * (qr.Q(fit$qr) %*% t(qr.Q(fit$qr)) %*%
#                                             (sqrt(.w) * .bootr))),
#          nrow = nrow(.ests), ncol = ncol(.ests), byrow = TRUE)
#
#
# .sse <- my_round(.sse)
# .stderrs <- sqrt(diag(chol2inv(qr.R(fit$qr))) * (.sse/fit$df.residual))
#
# attr(.ests, "std.err") <- .stderrs
attr(.ests, "original.estimates") <- fit$coefficients
attr(.ests, "original.std.err") <- sqrt(diag(vcov(fit)))
.ests
}
m1 <- lm(dist ~ speed, data = cars)
m0 <- lm(dist ~ 1, data = cars)
b1 <- tidylmboot::lm_boot(m1, replications = 499)
e1 <- estimate_parameters(m1, confidence.level = 0.95, simulation.replications = 499)
system.time {
b1 <- tidylmboot::lm_boot(m1, replications = 4999)}
system.time {
b2 <- bootstrap_residual(m1, reps = 4999, wild = FALSE)
}
system.time({
b1 <- tidylmboot::lm_boot(m1, replications = 4999)})
system.time({
b2 <- bootstrap_residual(m1, reps = 4999, wild = FALSE)
})
system.time({
b1 <- tidylmboot::lm_boot(m1, replications = 4999)})
system.time({
b2 <- bootstrap_residual(m1, reps = 4999, wild = FALSE)
})
system.time({
b0 <- lmboot::residual.boot(dist ~ speed, data = cars, B = 4999)
})
system.time({
b1 <- tidylmboot::lm_boot(m1, replications = 4999)})
system.time({
b2 <- bootstrap_residual(m1, reps = 4999, wild = FALSE)
})
system.time({
b0 <- lmboot::residual.boot(dist ~ speed, data = cars, B = 4999)
})
system.time({
b1 <- tidylmboot::lm_boot(m1, replications = 4999)})
system.time({
b2 <- bootstrap_residual(m1, reps = 4999, wild = FALSE)
})
