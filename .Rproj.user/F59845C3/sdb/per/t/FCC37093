{
    "collab_server" : "",
    "contents" : "#' Perform parametric bootstrap for generalized linear model.\n#'\n#' This is the workhorse for the \\code{estimate_parameters()} function when a\n#' generalized linear model is specified and parametric bootstrap is required.\n#' This is not meant to be called by the user directly.\n#'\n#' @param fit \\code{glm} object defining the model for which the parameters are\n#' estimated.\n#' @param reps scalar; number of bootstrap replications to perform.\n#'\n#' @return matrix with the same number of rows as coefficients in \\code{fit} and\n#' \\code{reps} columns. Each row contains the bootstrap estimates of the\n#' corresponding parameters.\n#'\n#' @examples\n#' \\dontrun{\n#' test.df <- data.frame(x = seq(10), y = seq(10) + rnorm(10))\n#' fit <- glm(y ~ x, data = test.df)\n#' bootstrap_parametric(fit, reps = 4999)\n#' }\n#'\n#' @import stats\nbootstrap_parametric <- function(fit, reps){\n\n  # obtain parametric bootstraps\n  .boot <- simulate(fit, reps)\n\n  # construct original data\n  .origdat <- get_all_vars(fit$formula, data = fit$data)\n\n  if (!is.null(.na.action <- fit$na.action)){\n    .origdata <- do.call(paste0(\"na.\", class(.na.action)),\n                         list(object = .origdata))\n  }\n\n  # refit model for each fit\n  .refit <- function(newy, fit, origdat){\n    origdat[, 1] <- newy\n\n    .newfit <- my_update(fit, paste(colnames(origdat)[1], \" ~ .\"),\n                         data = origdat)\n\n    c(coef(.newfit), sqrt(diag(vcov(.newfit))))\n  }\n\n  .all <- apply(.boot, 2, .refit, fit = fit, origdat = .origdat)\n\n  .ests <- .all[1:length(coef(fit)), , drop = FALSE]\n\n  attr(.ests, \"std.err\") <- .all[-c(1:length(coef(fit))), , drop = FALSE]\n  attr(.ests, \"original.estimates\") <- fit$coefficients\n  attr(.ests, \"original.std.err\") <- sqrt(diag(vcov(fit)))\n\n  .ests\n}\n\n\n\n#' Perform nonparametric bootstrap for generalized linear model.\n#'\n#' This is the workhorse for the \\code{estimate_parameters()} function when a\n#' generalized linear model is specified and case resampling bootstrap is\n#' required.  This is not meant to be called by the user directly.\n#'\n#' @param fit \\code{glm} object defining the model for which the parameters are\n#' estimated.\n#' @param reps scalar; number of bootstrap replications to perform.\n#'\n#' @return matrix with the same number of rows as coefficients in \\code{fit} and\n#' \\code{reps} columns. Each row contains the bootstrap estimates of the\n#' corresponding parameters.\n#'\n#' @examples\n#' \\dontrun{\n#' test.df <- data.frame(x = seq(10), y = seq(10) + rnorm(10))\n#' fit <- glm(y ~ x, data = test.df)\n#' bootstrap_case(fit, reps = 4999)\n#' }\n#'\n#' @import stats\nbootstrap_case <- function(fit, reps){\n\n  # construct original data\n  .origdat <- get_all_vars(fit$formula, data = fit$data)\n\n  if (!is.null(.na.action <- fit$na.action)){\n    .origdata <- do.call(paste0(\"na.\", class(.na.action)),\n                         list(object = .origdata))\n  }\n\n  # obtain nonparametric bootstraps\n  .n <- nrow(.origdat)\n  .boot <- matrix(sample(seq(.n), size = .n*reps, replace = TRUE),\n                  nrow = .n, ncol = reps)\n\n  # refit model for each fit\n  .refit <- function(obs, fit, origdat){\n    origdat <- origdat[obs, , drop = FALSE]\n\n    .newfit <- my_update(fit, data = origdat)\n\n    c(coef(.newfit), sqrt(diag(vcov(.newfit))))\n  }\n\n  # obtain bootstrap estimates\n  .all <- apply(.boot, 2, .refit, fit = fit, origdat = .origdat)\n\n  .ests <- .all[1:length(coef(fit)), , drop = FALSE]\n\n  attr(.ests, \"std.err\") <- .all[-c(1:length(coef(fit))), , drop = FALSE]\n  attr(.ests, \"original.estimates\") <- fit$coefficients\n  attr(.ests, \"original.std.err\") <- sqrt(diag(vcov(fit)))\n\n  .ests\n}\n\n\n\n#' Perform parametric bootstrap for predictions of generalized linear model.\n#'\n#' This is the workhorse for the \\code{estimate_mean_response()} function when a\n#' generalized linear model is specified and parametric bootstrap is required.\n#' This is not meant to be called by the user directly.\n#'\n#' @param fit \\code{glm} object defining the model for which the parameters are\n#' estimated.\n#' @param newdata new data set used to construct the predictions.\n#' @param reps scalar; number of bootstrap replications to perform.\n#'\n#' @return matrix with the same number of rows as rows of \\code{newdat} and\n#' \\code{reps} columns. Each row contains the bootstrap estimates of the\n#' corresponding prediction.\n#'\n#' @examples\n#'\n#' @import stats\nbootstrap_parametric_predict <- function(fit, newdata, reps){\n\n  # obtain parametric bootstraps\n  .boot <- simulate(fit, reps)\n\n  # construct original data\n  .origdat <- get_all_vars(fit$formula, data = fit$data)\n\n  if (!is.null(.na.action <- fit$na.action)){\n    .origdata <- do.call(paste0(\"na.\", class(.na.action)),\n                         list(object = .origdata))\n  }\n\n  # refit model for each fit\n  .refit <- function(newy, fit, newdata, origdat){\n    origdat[, 1] <- newy\n\n    .newfit <- my_update(fit, paste(colnames(origdat)[1], \" ~ .\"),\n                         data = origdat)\n\n    .yhat <- predict(.newfit, newdata = newdata, type = \"response\",\n                     se.fit = TRUE)\n\n    c(.yhat$fit, .yhat$se.fit)\n  }\n\n  .all <- apply(.boot, 2, .refit, fit = fit,\n                newdata = newdata, origdat = .origdat)\n\n  .ests <- .all[1:nrow(newdata), , drop = FALSE]\n  .orig <- predict(fit, newdata = newdata, type = \"response\", se.fit = TRUE)\n\n  attr(.ests, \"std.err\") <- .all[-c(1:nrow(newdata)), , drop = FALSE]\n  attr(.ests, \"original.estimates\") <- .orig$fit\n  attr(.ests, \"original.std.err\") <- .orig$se.fit\n\n  .ests\n}\n\n\n\n#' Perform nonparametric bootstrap for predictions of generalized linear model.\n#'\n#' This is the workhorse for the \\code{estimate_mean_response()} function when a\n#' generalized linear model is specified and case resampling bootstrap is\n#' required.  This is not meant to be called by the user directly.\n#'\n#' @param fit \\code{glm} object defining the model for which the parameters are\n#' estimated.\n#' @param newdata new data set used to construct the predictions.\n#' @param reps scalar; number of bootstrap replications to perform.\n#'\n#' @return matrix with the same number of rows as rows of \\code{newdat} and\n#' \\code{reps} columns. Each row contains the bootstrap estimates of the\n#' corresponding prediction.\n#'\n#' @examples\n#'\n#' @import stats\nbootstrap_case_predict <- function(fit, newdata, reps){\n\n  # construct original data\n  .origdat <- get_all_vars(fit$formula, data = fit$data)\n\n  if (!is.null(.na.action <- fit$na.action)){\n    .origdata <- do.call(paste0(\"na.\", class(.na.action)),\n                         list(object = .origdata))\n  }\n\n  # obtain nonparametric bootstraps\n  .n <- nrow(.origdat)\n  .boot <- matrix(sample(seq(.n), size = .n*reps, replace = TRUE),\n                  nrow = .n, ncol = reps)\n\n  # refit model for each fit\n  .refit <- function(obs, fit, newdata, origdat){\n    origdat <- origdat[obs, , drop = FALSE]\n\n    .newfit <- my_update(fit, data = origdat)\n\n    .yhat <- predict(.newfit, newdata = newdata, type = \"response\",\n                     se.fit = TRUE)\n\n    c(.yhat$fit, .yhat$se.fit)\n  }\n\n  # obtain bootstrap estimates\n  .all <- apply(.boot, 2, .refit, fit = fit,\n                newdata = newdata, origdat = .origdat)\n\n  .ests <- .all[1:nrow(newdata), , drop = FALSE]\n  .orig <- predict(fit, newdata = newdata, type = \"response\", se.fit = TRUE)\n\n  attr(.ests, \"std.err\") <- .all[-c(1:nrow(newdata)), , drop = FALSE]\n  attr(.ests, \"original.estimates\") <- .orig$fit\n  attr(.ests, \"original.std.err\") <- .orig$se.fit\n\n  .ests\n}",
    "created" : 1528738437319.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "348125134",
    "id" : "FCC37093",
    "lastKnownWriteTime" : 1528487666,
    "last_content_update" : 1528487666,
    "path" : "C:/Users/Administrator/OneDrive - Rose-Hulman Institute of Technology/Github/IntroAnalysis/R/bootstrap_glm.R",
    "project_path" : "R/bootstrap_glm.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}